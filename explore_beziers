#!/usr/bin/env python

import sys
import copy
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider

from arc import Arc
from bezier import Bezier
from point import Point
from utils import set_current_subplot
from constants import *


class BezierCurveApproximation:
	def __init__(self, bez, eps):
		self.translation = bez.points[0] / 4
		self.translation += bez.points[1] / 4
		self.translation += bez.points[2] / 4
		self.translation += bez.points[3] / 4
		bez = Bezier(
			bez.points[0] - self.translation, 
			bez.points[1] - self.translation, 
			bez.points[2] - self.translation, 
			bez.points[3] - self.translation
		)
		self.original_bezier_reversed = bez.reverse()
		self.current_bezier = bez.copy()
		self.t = 0
		self.arcs = []
		self.eps = eps
		self.counter = 0

	def __iter__(self):
		'''shouldn't be reused after this call, this should be consumed'''
		return self

	def __next__(self):
		if self.t >= 1:
			raise StopIteration
			
		self.counter += 1
		if self.counter > MAX_NB_ARCS:
			print("ERROR: MAX NB OF ARCS REACHED")
			raise StopIteration

		arc, t = self.current_bezier.approximate_beginning_with_arc(self.eps)
		self.t = t + self.t * (1-t)
		self.current_bezier = Bezier(*self.original_bezier_reversed.get_sub_bez_points(1-self.t)).reverse()
		return arc + self.translation

def splitting_interface(beziers):
	fig, axs = plt.subplots(2, 2)
	axs = axs.flatten()
	fig.subplots_adjust(bottom=0.25)
	ax_slider = fig.add_axes([0.15, 0.1, 0.75, 0.03])
	slider = Slider(
	    ax = ax_slider,
	    label = 'Cutting point',
	    valmin = 0.0,
	    valmax = 1.0,
	    valinit = INIT_CUTOFF,
	)

	for n in range(len(beziers)):
		beziers[n].set_fig(fig, axs[n])

	pre_beziers = []
	post_beziers = []

	for n in range(len(beziers)):
		b = beziers[n]
		(pre_points, post_points) = b.split_at(INIT_CUTOFF)
		pre_beziers.append(Bezier(*pre_points, fig, axs[n]))
		post_beziers.append(Bezier(*post_points, fig, axs[n]))

		b.print(linewidth = 1.3)
		pre_beziers[-1].print(marker="x", pointcolor="orange", linecolor="orange")
		post_beziers[-1].print(marker="x", pointcolor="green", linecolor="green")

	def update(val):
		for n in range(len(beziers)):
			b = beziers[n]
			(pre_points, post_points) = b.split_at(val)
			pre_beziers[n].set_points(*pre_points)
			pre_beziers[n].print()
			post_beziers[n].set_points(*post_points)
			post_beziers[n].print()
		fig.canvas.draw_idle()
	slider.on_changed(update)
	plt.show()

def double_split_interface(beziers):
	fig, axs = plt.subplots(2, 2)
	axs = axs.flatten()
	fig.subplots_adjust(bottom=0.25)
	ax_slider = fig.add_axes([0.15, 0.1, 0.75, 0.03])
	slider_bot = Slider(
	    ax = ax_slider,
	    label = 'Bottom cut',
	    valmin = 0.0,
	    valmax = 0.5,
	    valinit = INIT_BOT,
	)
	ax_slider = fig.add_axes([0.15, 0.13, 0.75, 0.03])
	slider_top = Slider(
	    ax = ax_slider,
	    label = 'Top cut',
	    valmin = 0.5,
	    valmax = 1.0,
	    valinit = INIT_TOP,
	)

	cut = [INIT_BOT, INIT_TOP]
	cut_beziers = []
	for n in range(len(beziers)):
		b = beziers[n]
		b.set_fig(fig, axs[n])
		b.print(linewidth = 1.3)
		cut_points = b.split_at_both(*cut)
		cut_beziers.append(Bezier(*cut_points, fig, axs[n]))
		cut_beziers[-1].print(marker = "x", pointcolor = "orange", linecolor = "orange")

	def update():
		for n in range(len(beziers)):
			b = beziers[n]
			cut_points = b.split_at_both(*cut)
			cut_beziers[n].set_points(*cut_points)
			cut_beziers[n].print()
		fig.canvas.draw_idle()
	def update_bot(val):
		cut[0] = val
		update()
	def update_top(val):
		cut[1] = val
		update()

	slider_top.on_changed(update_top)
	slider_bot.on_changed(update_bot)

	plt.show()

def approximate_with_curves(beziers):
	fig, axs = plt.subplots(2, 2)
	fig.suptitle("Beziers curves approximation with circular arcs")
	axs = axs.flatten()
	fig.subplots_adjust(bottom=0.25)
	ax_slider = fig.add_axes([0.15, 0.1, 0.75, 0.03])
	log_init_eps = (np.log(MIN_EPS) + np.log(MAX_EPS)) / 2
	init_eps = np.exp(log_init_eps)
	slider = Slider(
	    ax = ax_slider,
	    label = 'log(precision)',
	    valmin = np.log(MIN_EPS),
	    valmax = np.log(MAX_EPS),
	    valinit = log_init_eps,
	)

	all_arcs = []
	for n in range(len(beziers)):
		axs[n].axis('equal')
		beziers[n].set_fig(fig, axs[n])
		beziers[n].print(linewidth = 1.3)

		approximator = BezierCurveApproximation(beziers[n], init_eps)
		arcs = [a for a in approximator]
		for arc in arcs:
			arc.set_fig(fig, axs[n])
			arc.print(linecolor="orange", marker="x", pointcolor="orange")
		all_arcs.append(arcs)

	def update(val):
		eps = np.exp(val)
		if eps <= 0:
			return
		for n in range(len(beziers)):
			set_current_subplot(beziers[n].f, beziers[n].ax)
			for arc in all_arcs[n]:
				arc.printed_line.remove()
				arc.printed_points.remove()
				# arc.printed_mid_point.remove()
			approximator = BezierCurveApproximation(beziers[n], eps)
			all_arcs[n] = [a for a in approximator]
			for arc in all_arcs[n]:
				arc.set_fig(fig, axs[n])
				arc.print(linecolor="orange", marker="x", pointcolor="orange")
		fig.canvas.draw_idle()
	slider.on_changed(update)

	plt.show(block = True)

def nb_approximation_vs_precision(beziers, block = True):
	fig, axs = plt.subplots(2, 2)
	fig.suptitle("Number of arcs needed to approximate the Beziers curves")
	axs = axs.flatten()

	log_min_eps = np.log(MIN_EPS)
	log_max_eps = np.log(MAX_EPS)
	log_x = np.array([log_min_eps + n*(log_max_eps - log_min_eps)/(NB_EPS-1) for n in range(NB_EPS)])
	x = np.exp(log_x)

	for n in range(len(beziers)):
		set_current_subplot(fig, axs[n])

		y = []
		for i in range(len(x)):
			print("BEZIER", n, str(i)+"/"+str(len(x)-1)+"  ", end='\r')
			y.append(0)
			for arc in BezierCurveApproximation(beziers[n], x[i]):
				y[-1] += 1
		y = np.array(y)

		log_y = np.log(y)
		poly = np.polynomial.polynomial.Polynomial.fit(log_x, log_y, 1)
		log_y2 = poly(log_x)

		plt.plot(x, y, label = "nb of arcs")
		plt.plot(x, np.exp(log_y2), color = "red", alpha = 0.4, label = "fit degree: " + str(abs(poly.coef[1])))
		plt.xscale("log")
		plt.yscale("log")
		plt.ylabel("Number of arcs generated")
		plt.xlabel("Precision asked")
		plt.legend()

	print(' ' * 20, end='\r')
	plt.show(block = block)

def nb_approximation_vs_scale(beziers, block = True):
	eps = 1e-4
	fig, axs = plt.subplots(2, 2)
	fig.suptitle("Number of arcs needed to approximate the scaled Beziers curves\nPrecision: " + str(eps))
	axs = axs.flatten()

	log_min_scale = np.log(MIN_SCALE)
	log_max_scale = np.log(MAX_SCALE)
	log_x = np.array([log_min_scale + n*(log_max_scale - log_min_scale)/(NB_SCALES-1) for n in range(NB_SCALES)])
	x = np.exp(log_x)

	for n in range(len(beziers)):
		set_current_subplot(fig, axs[n])

		y = []
		for i in range(len(x)):
			print("BEZIER", n, str(i)+"/"+str(len(x)-1)+"  ", end='\r')
			y.append(0)
			for arc in BezierCurveApproximation(beziers[n].scale(x[i]), eps):
				y[-1] += 1
		y = np.array(y)

		log_y = np.log(y)
		poly = np.polynomial.polynomial.Polynomial.fit(log_x, log_y, 1)
		log_y2 = poly(log_x)

		plt.plot(x, y, label = "nb of arcs")
		plt.plot(x, np.exp(log_y2), color = "red", alpha = 0.4, label = "fit degree: " + str(abs(poly.coef[1])))
		plt.xscale("log")
		plt.yscale("log")
		plt.ylabel("Number of arcs generated")
		plt.xlabel("Scaling of the Bezier")
		plt.legend()

	print(' ' * 20, end='\r')
	plt.show(block = block)

def test_arc_primitives():
	eps = 0.001

	fig, axs = plt.subplots(3, 2)
	axs[0, 0].axis('equal')
	axs[1, 0].axis('equal')
	axs[2, 0].axis('equal')
	axs[0, 1].axis('equal')
	axs[1, 1].axis('equal')
	axs[2, 1].axis('equal')
	arc0 = Arc(Point(1, 1), Point(0.2, 0.5), Point(0, 0), eps = eps)
	arc1 = Arc(Point(0, 0), Point(1, 1), Point(2, 0), eps = eps)
	arc2 = Arc(Point(1, 1), Point(4, 0), Point(0, 0), eps = eps)

	arc0_ = Arc(Point(0, 0), Point(0.2, 0.5), Point(1, 1), eps = eps)
	arc1_ = Arc(Point(2, 0), Point(1, 1), Point(0, 0), eps = eps)
	arc2_ = Arc(Point(0, 0), Point(4, 0), Point(1, 1), eps = eps)

	arc0.set_fig(fig, axs[0, 0])
	arc1.set_fig(fig, axs[1, 0])
	arc2.set_fig(fig, axs[2, 0])
	arc0_.set_fig(fig, axs[0, 1])
	arc1_.set_fig(fig, axs[1, 1])
	arc2_.set_fig(fig, axs[2, 1])

	arc0.print()
	arc1.print()
	arc2.print()
	arc0_.print()
	arc1_.print()
	arc2_.print()

	for arc in [arc0, arc1, arc2, arc0_, arc1_, arc2_]:
		more_than_pi = arc.is_more_than_half_circle()
		arc.ax.set_title("more then half circle: " + str(more_than_pi))

		v1 = arc.points[0] - arc.center
		vmid = arc.points[1] - arc.center
		v2 = arc.points[2] - arc.center

		NB_ANGLES = 200
		set_current_subplot(arc.f, arc.ax)
		angles = [t * 2*np.pi / (NB_ANGLES-1) for t in range(NB_ANGLES)]
		x = [arc.center.x + arc.radius * np.cos(t) for t in angles]
		y = [arc.center.y + arc.radius * np.sin(t) for t in angles]
		for xx, yy in zip(x, y):
			p = Point(xx, yy)
			if arc.point_on_arc(p, 0.001):
				color = "green"
			else:
				color = "red"

			plt.plot([p.x], [p.y], linestyle="", marker = "+", color=color, alpha = 0.8)

	plt.show()


if __name__ == "__main__":
	beziers = [
		Bezier(
			Point(0, 0), 
			Point(0, 1), 
			Point(2, 1), 
			Point(2, 0), 
		),
		Bezier(
			Point(817971.6265425573, -552170.1314695535), 
			Point(817969.0200408974, -552284.5516594574), 
			Point(817868.4482740208, -552378.2670267785), 
			Point(817744.5213466629, -552381.7539508399), 
		),
		Bezier(
			Point(0, 0), 
			Point(2, 1), 
			Point(0, 1), 
			Point(2, 0), 
		),
		Bezier(
			Point(0, 0), 
			Point(2.5, 1), 
			Point(-0.5, 1), 
			Point(2, 0), 
		),
	]

	# splitting_interface(beziers)
	# double_split_interface(beziers)

	# nb_approximation_vs_precision(beziers, block = False)
	# nb_approximation_vs_scale(beziers)
	approximate_with_curves(beziers)

	# test_arc_primitives()


